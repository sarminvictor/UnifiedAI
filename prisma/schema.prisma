generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String              @id @default(uuid()) @map("id")
  email               String              @unique
  password            String?
  credits_remaining   String              @default("0")
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  name                String?
  resetToken          String?
  api_usage_logs      APIUsageLog[]
  chats               Chat[]
  credit_transactions CreditTransaction[]
  subscriptions       Subscription[]
  settings            UserSettings?
}

model Plan {
  plan_id           String         @id @default(uuid())
  plan_name         String         @unique
  credits_per_month String
  price             String
  subscriptions     Subscription[]
}

model Subscription {
  subscription_id     String              @id @default(uuid())
  user_id             String
  plan_id             String
  start_date          DateTime            @default(now())
  end_date            DateTime
  status              String
  payment_status      String
  stripe_info         String?             // Format: "status | customer | product"
  stripe_payment_id   String
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  credit_transactions CreditTransaction[]
  plan                Plan                @relation(fields: [plan_id], references: [plan_id])
  user                User                @relation(fields: [user_id], references: [id])
}

model API {
  api_id            String        @id @default(uuid())
  api_name          String        @unique
  pricing_per_token String
  input_output_type String
  status            String        @default("Active")
  llm_model         String
  api_usage_logs    APIUsageLog[] @relation("UsageLogAPI")
}

model Chat {
  chat_id             String        @id @default(uuid())
  user_id             String
  chat_title          String
  created_at          DateTime      @default(now())
  updated_at          DateTime      @updatedAt
  deleted             Boolean       @default(false)
  chat_summary        String?
  brainstorm_mode     Boolean       @default(false)
  brainstorm_settings Json?
  api_usage_logs      APIUsageLog[]
  user                User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  chat_history        ChatHistory[]
}

model ChatHistory {
  history_id       String   @id @default(uuid())
  chat_id          String
  user_input       String?
  api_response     String?
  input_type       String?
  output_type      String?
  timestamp        DateTime @default(now())
  context_id       String
  model            String?
  credits_deducted String
  chat             Chat     @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)
}

model APIUsageLog {
  log_id            String   @id @default(uuid())
  user_id           String
  chat_id           String
  api_id            String
  tokens_used       String
  prompt_tokens     String
  completion_tokens String
  credits_deducted  String
  api_cost          String
  usage_type        String
  input_type        String
  output_type       String
  timestamp         DateTime @default(now())
  messages_used     Json?
  apis              API      @relation("UsageLogAPI", fields: [api_id], references: [api_id], onDelete: Cascade)
  chat              Chat     @relation(fields: [chat_id], references: [chat_id], onDelete: Cascade)
  user              User     @relation(fields: [user_id], references: [id])
}

model CreditTransaction {
  transaction_id   String       @id @default(uuid())
  user_id          String
  subscription_id  String
  credits_added    String
  credits_deducted String
  payment_method   String       @default("Stripe")
  description      String
  timestamp        DateTime     @default(now())
  subscription     Subscription @relation(fields: [subscription_id], references: [subscription_id])
  user             User         @relation(fields: [user_id], references: [id])
}

model UserSettings {
    id          String   @id @default(cuid())
    user_id     String   @unique
    user        User     @relation(fields: [user_id], references: [id])
    ai_provider String   @default("openai")
    ai_model    String   @default("gpt-3.5-turbo")
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt

    @@map("user_settings")
}
